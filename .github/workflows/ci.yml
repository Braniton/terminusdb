# DO NOT USE
name: CI

on:
  workflow_dispatch:
#  push:
#  pull_request:

env:
  LAST_RELEASED_VERSION: 11.1.14
  CURRENT_REPO_VERSION: 11.1.15

jobs:
  is_duplicate_run:
    # DISABLED, DO NOT USE
    if: false  
    name: Duplicate run?
    runs-on: ubuntu-latest

    outputs:
      duplicate_run: ${{ steps.check_skip.outputs.should_skip }}

    steps:
      - uses: fkirc/skip-duplicate-actions@master
        id: check_skip
        with:
          # Skip a concurrent run triggered by a pull_request event if there is
          # already a run triggered by a push event.
          concurrent_skipping: same_content_newer
          # Cancel runs from outdated commits.
          cancel_others: 'true'
          # Do not skip push events. They are used by the push_docker job.
          do_not_skip: '["push", "workflow_dispatch", "schedule"]'

  is_build_required:
    name: Build required?
    runs-on: ubuntu-latest

    outputs:
      build_required: ${{ steps.filter.outputs.change_other_than_docs_alone }}
      push_docker_required: >-
        ${{
          github.repository == 'terminusdb/terminusdb' &&
          github.event_name == 'push' && (
            github.ref == 'refs/heads/main' ||
            github.ref == 'refs/heads/add_vectorlink' ||
            startsWith(github.ref, 'refs/tags/v')
          )
        }}

    steps:
      - uses: actions/checkout@v4

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            change_other_than_docs_alone:
              - '**'
              - '!**/*.md'
              - '!docs/**'
              - '!LICENSE'            
#origin filter              - '!(**.md|docs/**|LICENSE)'

  versions:
    name: Versions
    runs-on: ubuntu-latest
    needs:
      - is_duplicate_run
      - is_build_required
    # Build if we need to push a Docker image or there is no duplicate run in
    # progress and a build is required due to changed files.
    if: |
      needs.is_build_required.outputs.push_docker_required == 'true' || (
        needs.is_duplicate_run.outputs.duplicate_run == 'false' &&
        needs.is_build_required.outputs.build_required == 'true'
      )

    steps:
      - uses: actions/checkout@v3

      - name: Run Cog to update versions in files
        run: |
          pip install cogapp
          cog -v
          cog -r \
            -D LAST_RELEASED_VERSION=$LAST_RELEASED_VERSION \
            -D CURRENT_REPO_VERSION=$CURRENT_REPO_VERSION \
            docs/release-steps.md \
            src/config/terminus_config.pl \
            distribution/snap/snapcraft.yaml

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Update versions
          file_pattern: >-
            docs/release-steps.md
            src/config/terminus_config.pl
            distribution/snap/snapcraft.yaml

  amd64_build:
    name: Build Docker (amd64)
    needs: versions
    uses: ./.github/workflows/docker-amd64-build.yml

  arm64_build:
    name: Build Docker (arm64)
    needs:
      - is_build_required
    uses: ./.github/workflows/docker-arm64-build.yml
    if: needs.is_build_required.outputs.push_docker_required == 'true'

 # This is required for status checks.
  all_checks_pass_with_build:
    name: All checks pass
    runs-on: ubuntu-latest
    needs: amd64_build
    steps:
      - run: echo "Celebrate! ðŸ¥³"

  docs:
    name: Update docs
    runs-on: ubuntu-latest
    needs: all_checks_pass_with_build
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: terminusdb-server-snapshot-amd64

      - name: Generate man page
        run: |
          sudo apt-get install --no-install-recommends ronn
          ronn --version
          docker load < terminusdb-server-snapshot-amd64.tar.gz
          export HELP="$(docker run --rm terminusdb/terminusdb-server:local /app/terminusdb/terminusdb help -m)"
          envsubst < docs/terminusdb.1.ronn.template > docs/terminusdb.1.ronn
          ronn --roff docs/terminusdb.1.ronn

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Update man page
          file_pattern: docs/terminusdb.1.*

  # This is required for status checks.
  all_checks_pass_without_build:
    name: All checks pass
    runs-on: ubuntu-latest
    needs: is_build_required
    if: >
      needs.is_build_required.outputs.build_required == 'false' &&
      needs.is_build_required.outputs.push_docker_required == 'false'
    steps:
      - run: echo "Nothing to be done. ðŸ˜Œ"

  push_docker:
    name: Push Docker image
    needs:
      - is_build_required
      - all_checks_pass_with_build
      - arm64_build
    if: needs.is_build_required.outputs.push_docker_required == 'true'
    uses: ./.github/workflows/publish.yml

  trigger_snap:
    name: Trigger snap build
    if: >-
      github.repository == 'terminusdb/terminusdb' &&
      github.event_name == 'push' &&
      startsWith(github.ref, 'refs/tags/v')
    needs:
      - is_build_required
      - all_checks_pass_with_build
    uses: ./.github/workflows/snap.yml

  release_snap:
    name: Release the build snap
    needs: trigger_snap
    runs-on: ubuntu-latest

    steps:
      - name: Download Snap image
        uses: actions/download-artifact@v4
        with:
          name: terminusdb-snap
          path: download_snap/
      - name: Determine exact snap path
        id: snap_path_step
        run: echo "::set-output name=snap_path::$(find download_snap -name '*.snap')"
      - uses: snapcore/action-publish@v1
        env:
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAP_STORE_LOGIN }}
        with:
          snap: ${{ steps.snap_path_step.outputs.snap_path }}
          release: stable

