# Build and run tests every night on non-Docker systems.
name: Native Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    #  schedule:
    #- cron:  '45 1 * * *'

jobs:

  unit-tests:
    name: "Unit Tests"
    strategy:
      # Run all jobs even when some jobs fail.
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            swipl_release: stable
          - os: macos-latest
            swipl_release: homebrew
#            - os: ubuntu-latest
#            swipl_release: devel

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for file changes
        id: check_changes
        run: |
          git fetch --depth=2
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          RELEVANT_CHANGED=$(echo "$CHANGED_FILES" | grep -E '^(src/|docs/|tests/|distribution/|Makefile)' || true)
          if [ -n "$RELEVANT_CHANGED" ]; then
            echo "Relevant files changed: $RELEVANT_CHANGED"
            echo "::set-output name=relevant_changed::true"
          else
            echo "No relevant files changed"
            echo "::set-output name=relevant_changed::false"
          fi

      - name: Install swi-prolog 
        if: ${{ steps.check_changes.outputs.relevant_changed == 'true' }}      
        run: ./.github/install-swi-prolog.sh ${{ matrix.swipl_release }}

      - name: Checkout tus
        if: ${{ steps.check_changes.outputs.relevant_changed == 'true' }}            
        uses: actions/checkout@v4
        with:
          repository: terminusdb/tus
          path: tus
          ref: v0.0.5

      - name: Install tus
        if: ${{ steps.check_changes.outputs.relevant_changed == 'true' }}                  
        run: swipl -g "pack_install('file://$GITHUB_WORKSPACE/tus', [interactive(false)])"

      - name: Install Protobuf Compiler (Linux)
        if: ${{runner.os == 'Linux' &&  steps.check_changes.outputs.relevant_changed == 'true' }}            
        run: sudo apt-get update && sudo apt-get install -y protobuf-compiler

      - name: Install Protobuf Compiler (macOS)
        if: ${{ runner.os == 'macOS' && steps.check_changes.outputs.relevant_changed == 'true' }}            
        run: brew install protobuf

      - name: Build
        if: ${{ steps.check_changes.outputs.relevant_changed == 'true' }}                  
        run: make

      - name: Unit tests
        if: ${{ steps.check_changes.outputs.relevant_changed == 'true' }}                  
        run: make test

  inter-tests:
    name: "Integration Tests"
    if: github.event_name == 'pull_request'

    strategy:
      # Run all jobs even when some jobs fail.
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            swipl_release: stable
          - os: macos-latest
            swipl_release: homebrew
#            - os: ubuntu-latest
#            swipl_release: devel

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install swi-prolog 
        run: ./.github/install-swi-prolog.sh ${{ matrix.swipl_release }}

      - name: Checkout tus
        uses: actions/checkout@v4
        with:
          repository: terminusdb/tus
          path: tus
          ref: v0.0.5

      - name: Install tus
        run: swipl -g "pack_install('file://$GITHUB_WORKSPACE/tus', [interactive(false)])"

      - name: Install Protobuf Compiler (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y protobuf-compiler

      - name: Install Protobuf Compiler (macOS)
        if: runner.os == 'macOS'
        run: brew install protobuf

      - name: Build TerminusDB
        run: make

      - name: Init TerminusDB
        run: |
          ./terminusdb store init

      - name: Start TerminusDB
        run: |
          ./terminusdb serve &
          echo $! > terminusdb.pid
          sleep 5  # wait for server to start

      - name: Install NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Run tests
#        env:
#          TERMINUSDB_DOCKER_CONTAINER: terminusdb
#          MOCHA_JOBS: "4"
#          MOCHA_PARALLEL: true
        run: |
            cd tests        
            npm install-ci-test
  
      - name: Stop TerminusDB
        if: always()
        run: |
            kill $(cat terminusdb.pid)      
        